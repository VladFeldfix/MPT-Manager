-- open HTML file in another window
if GetGlobalPersist('LastHTML') then lastHTML = GetGlobalPersist('LastHTML') else lastHTML = '' end
if lastHTML ~= 'TYUC12000A' then
  os.execute('start cmd /k "cd C:/MPT Studio/db/tests/products/HTML & TYUC12000A.html & exit"')
  os.execute('start cmd /k "cd C:/MPT Studio/db/tests/products/HTML/.instructions/TYUC12000A & Instructions1.html & exit"')
  os.execute('start cmd /k "cd C:/MPT Studio/db/tests/products/HTML/.instructions/TYUC12000A & Instructions2.html & exit"')
  LastHTML = 'TYUC12000A'
  SetGlobalPersist('LastHTML', LastHTML)
end

-- Get Operator Name and Serial Number
if GetPersist('OperatorName') then OperatorName = GetPersist('OperatorName') else OperatorName = 'OperatorName' end 
if GetPersist('SerialNumber') then SerialNumber = GetPersist('SerialNumber') else SerialNumber = 'SerialNumber' end
OperatorName = InputText('Enter Operator Name',OperatorName, 'Operator Name', '')
SetPersist('OperatorName',OperatorName)
SerialNumber = InputText('Enter Serial Number',SerialNumber, 'Serial Number', '')
SetPersist('SerialNumber',SerialNumber)

-- Generate report header
Report.Header('---------------------','-------------------------------')
Report.Header('PCBA Part Number',ProductName())
Report.Header('Written by','Vladimir Shishkovsky')
Report.Header('from','FLEX For RAFAEL R&D')
Report.Header('Machine Type',"MPT5000")
Report.Header('Machine SW Version',"2.4.2.4")
Report.Header('Date','2024-07-15')
Report.Header('SW Part Number',"TYUC12000A")
Report.Header('According to TRD No.',"PS-39-756948 Rev.: L")
Report.Header('---------------------','-------------------------------')
Report.Header('UUT Name',tostring("MCP [MAIN CONTROL PANEL]"))
Report.Header('Wiring Diagram',tostring("R00-210707")..' Rev.: '..tostring("C"))
Report.Header('UUT Serial Number',tostring(SerialNumber))
Report.Header('Operator Name',tostring(OperatorName))

-- setup forlder for report file
require "lfs"
rep_new_path = lfs.currentdir()..'\\db\\tests\\results\\'..ProductName()
lfs.mkdir(rep_new_path)
SetReportLocation(rep_new_path)

-- setup report file name
date_stamp = os.date('%d%b%Y')
str_date_stamp = date_stamp.upper(date_stamp)
SetReportFileName(SerialNumber..'_'..str_date_stamp..'_'..ProductName())

-- display Operator Name and Serial Number
Report.Info(OperatorName)
Report.Info(SerialNumber)


-- Continuity Test
Report.Info("")
ContinuitySetup = {
  setup = {i = 1000 mA, v = 5 V, tare = {mode = 'system'}},
  criteria = {r < 1 Ω},
  options = {use_star_mode = 1}
}
Continuity('Test Continuity', 'hcs', ContinuitySetup)


-- Test button
Report.Info("")
Report.Info("Testing button LS1 Lamp_Dimmer")
WaitForContinuity("Testing continuity P2.46 -> P1.64", "Press button LS1 Lamp_Dimmer", P2.46, P1.64, 'msr', {i = 100 mA, delay = 100ms,  tare = {mode='fixed', data = {res = 2.20Ω}}},1.6, 1000)
WaitForNoContinuity("Testing isolation P2.46 -> P1.64", "Release button LS1 Lamp_Dimmer", P2.46, P1.64, 'msr', {i = 100 mA, delay = 100ms,  tare = {mode='fixed', data = {res = 2.20Ω}}},1.6, 1000)

-- Test button
Report.Info("")
Report.Info("Testing button LS2 Lamp_Test")
WaitForContinuity("Testing continuity P2.46 -> P1.74", "Press button LS2 Lamp_Test", P2.46, P1.74, 'msr', {i = 100 mA, delay = 100ms,  tare = {mode='fixed', data = {res = 2.20Ω}}},1.6, 1000)
WaitForNoContinuity("Testing isolation P2.46 -> P1.74", "Release button LS2 Lamp_Test", P2.46, P1.74, 'msr', {i = 100 mA, delay = 100ms,  tare = {mode='fixed', data = {res = 2.20Ω}}},1.6, 1000)
ClearAllPoints()

-- Test button
Report.Info("")
Report.Info("Testing button S3 Main_Power")
WaitForContinuity("Testing continuity P3.67 -> J3.4", "Press button S3 Main_Power", P3.67, J3.4, 'msr', {i = 100 mA, delay = 100ms,  tare = {mode='fixed', data = {res = 2.20Ω}}},1.6, 1000)
WaitForNoContinuity("Testing isolation P3.67 -> J3.4", "Release button S3 Main_Power", P3.67, J3.4, 'msr', {i = 100 mA, delay = 100ms,  tare = {mode='fixed', data = {res = 2.20Ω}}},1.6, 1000)
ClearAllPoints()

-- Test button
Report.Info("")
Report.Info("Testing button S3 Main_Power Secondary")
WaitForContinuity("Testing continuity P11.11 -> P11.12", "Press button S3 Main_Power", P11.11, P11.12, 'msr', {i = 100 mA, delay = 100ms,  tare = {mode='fixed', data = {res = 2.20Ω}}},1.6, 1000)
WaitForNoContinuity("Testing isolation P11.11 -> P11.12", "Release button S3 Main_Power", P11.11, P11.12, 'msr', {i = 100 mA, delay = 100ms,  tare = {mode='fixed', data = {res = 2.20Ω}}},1.6, 1000)
ClearAllPoints()

-- Test button
Report.Info("")
Report.Info("Testing button LS4 Emer_Power_Off")
WaitForContinuity("Testing continuity P11.11 -> O1_01.3", "Press button LS4 Emer_Power_Off", P11.11, O1_01.3, 'msr', {i = 100 mA, delay = 100ms,  tare = {mode='fixed', data = {res = 2.20Ω}}},1.6, 1000)
WaitForNoContinuity("Testing isolation P11.11 -> O1_01.3", "Release button LS4 Emer_Power_Off", P11.11, O1_01.3, 'msr', {i = 100 mA, delay = 100ms,  tare = {mode='fixed', data = {res = 2.20Ω}}},1.6, 1000)
ClearAllPoints()

-- Test button
Report.Info("")
Report.Info("Testing button S8 Horn")
WaitForContinuity("Testing continuity P3.59 -> P1.84", "Press button S8 Horn", P3.59, P1.84, 'msr', {i = 100 mA, delay = 100ms,  tare = {mode='fixed', data = {res = 2.20Ω}}},1.6, 1000)
WaitForNoContinuity("Testing isolation P3.59 -> P1.84", "Release button S8 Horn", P3.59, P1.84, 'msr', {i = 100 mA, delay = 100ms,  tare = {mode='fixed', data = {res = 2.20Ω}}},1.6, 1000)
ClearAllPoints()

-- Test button
Report.Info("")
Report.Info("Testing button S5 COAX CAM")
WaitForContinuity("Testing continuity P1.82 -> P2.6", "Press button S5 COAX CAM", P1.82, P2.6, 'msr', {i = 100 mA, delay = 100ms,  tare = {mode='fixed', data = {res = 2.20Ω}}},1.6, 1000)
WaitForNoContinuity("Testing isolation P1.82 -> P2.6", "Release button S5 COAX CAM", P1.82, P2.6, 'msr', {i = 100 mA, delay = 100ms,  tare = {mode='fixed', data = {res = 2.20Ω}}},1.6, 1000)
ClearAllPoints()

-- Test switch
Report.Info("")
Report.Info("Testing switch S7 ZOOM")
WaitForContinuity("Testing continuity P2.46 -> P2.71", "Set switch S7 ZOOM to position OUT", P2.46, P2.71, 'msr', {i = 100 mA, delay = 100ms,  tare = {mode='fixed', data = {res = 2.20Ω}}},1.6, 1000)
ClearAllPoints()

-- Test switch
Report.Info("")
Report.Info("Testing switch S7 ZOOM")
WaitForContinuity("Testing continuity P2.46 -> P2.88", "Set switch S7 ZOOM to position IN", P2.46, P2.88, 'msr', {i = 100 mA, delay = 100ms,  tare = {mode='fixed', data = {res = 2.20Ω}}},1.6, 1000)
ClearAllPoints()

-- Test switch
Report.Info("")
Report.Info("Testing switch S6 FOCUS")
WaitForContinuity("Testing continuity P2.46 -> P1.91", "Set switch S6 FOCUS to position OUT", P2.46, P1.91, 'msr', {i = 100 mA, delay = 100ms,  tare = {mode='fixed', data = {res = 2.20Ω}}},1.6, 1000)
ClearAllPoints()

-- Test switch
Report.Info("")
Report.Info("Testing switch S6 FOCUS")
WaitForContinuity("Testing continuity P2.46 -> P2.83", "Set switch S6 FOCUS to position IN", P2.46, P2.83, 'msr', {i = 100 mA, delay = 100ms,  tare = {mode='fixed', data = {res = 2.20Ω}}},1.6, 1000)
ClearAllPoints()

-- Test LED
Report.Info("")
Report.Info("Testing LEDS")
Diode(LS1)
Diode(LS2)
Diode(LS4)

--Visual test LEDs
Report.Info("")
Report.Info("Visual tests")
SetHighAuxiliary(P12.33)
SetLowAuxiliary(P3.88)
SetPPSOn('hcs', {i = 0.01, v = 2.2})
Sleep(1)
LED = ConfirmationPrompt ('Confirm that LS1 Dimmer Lamp is GREEN', 'LED Test')
if not LED then Report.Fail('* LED LS1 Dimmer Lamp Failed') else Report.Pass('LED LS1 Dimmer Lamp Passed') end
SetPPSOff('hcs')
ClearAllPoints()

-- Test LED
SetHighAuxiliary(P12.34)
SetLowAuxiliary(P3.55)
SetPPSOn('hcs', {i = 0.01, v = 2.2})
Sleep(1)
LED = ConfirmationPrompt ('Confirm that LS2 Lamp Test Lamp is YELLOW', 'LED Test')
if not LED then Report.Fail('* LED LS2 Lamp Test Lamp Failed') else Report.Pass('LED LS2 Lamp Test Lamp Passed') end
SetPPSOff('hcs')
ClearAllPoints()

-- Test LED
SetHighAuxiliary(P12.35)
SetLowAuxiliary(P3.89)
SetPPSOn('hcs', {i = 0.01, v = 2.2})
Sleep(1)
LED = ConfirmationPrompt ('Confirm that LS4 Emer Power Lamp is RED', 'LED Test')
if not LED then Report.Fail('* LED LS4 Emer Power Lamp Failed') else Report.Pass('LED LS4 Emer Power Lamp Passed') end
SetPPSOff('hcs')
ClearAllPoints()

-- Isolation Test
Report.Info("")
IsolationSetup = {
  setup = {i = 10 uA, tare = {mode = 'system'}},
  criteria = {r > 100 kΩ},
  diagnose = {},
}
Isolation('Test Isolation', 'msr', IsolationSetup, 'all')

-- HiPot Test
Report.Info("")
HiPotSetup = {
  setup = {v = 500 V, dwell = 1s},
  criteria = {r > 100 MΩ},
}
if Failed() then
else
Hipot('Test HiPot DC', 'hvdc', HiPotSetup, 'all')
end

-- Test Result
Report.Info("")
if Failed() then
  SetResults.Add.Fail()
  Beep(100)
  Sleep(0.05)
  Beep(100)
  Sleep(0.05)
  Beep(100)
  Report.Fail("*Test Result: Failed")
else
  SetResults.Add.Pass()
  Beep(1000)
  Report.Pass("Test Result: Passed")
end